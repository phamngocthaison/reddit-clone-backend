{
  "info": {
    "name": "Reddit Clone Backend API",
    "description": "\n# Reddit Clone Backend API Collection\n\n## Authentication Setup\n\nThis collection includes Bearer token management with helpful validation:\n\n1. **Environment Variables Required:**\n   - `baseUrl`: API base URL (e.g., https://your-api.amazonaws.com/prod)\n   - `access_token`: JWT access token (get from login)\n   - `userId`: User ID (get from login)\n\n2. **Pre-request Script:**\n   - Validates token and environment variables\n   - Shows helpful messages if token is missing\n   - No automatic login (manual login required)\n\n3. **Getting Started:**\n   - Set up environment variables\n   - Run \"User Login - Valid (Email)\" or \"User Login - Valid (Username)\" first\n   - Token and user ID will be automatically saved\n   - All subsequent requests will use the saved token\n\n## Usage:\n1. Set up environment with `baseUrl`\n2. Run a Login request to get token and user ID\n3. Run any other request - token will be validated\n\n## Architecture:\n- **AuthLambda**: Handles authentication and posts\n- **CommentsLambda**: Handles comments (separate function)\n- **SubredditsLambda**: Handles subreddit management\n- **FeedsLambda**: Handles news feed functionality\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.1.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://ugn2h0yxwf.execute-api.ap-southeast-1.amazonaws.com/prod",
      "type": "string"
    },
    {
      "key": "localUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "username",
      "value": "testuser",
      "type": "string"
    },
    {
      "key": "password",
      "value": "TestPass123",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "TestPass123",
      "type": "string"
    },
    {
      "key": "postId",
      "value": "",
      "type": "string"
    },
    {
      "key": "subredditId",
      "value": "subreddit_test_123",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check if token exists and validate",
          "const token = pm.environment.get('access_token');",
          "const userId = pm.environment.get('userId');",
          "",
          "if (!token) {",
          "    console.log('‚ö†Ô∏è  No access token found. Please run a Login request first.');",
          "    console.log('üí° Tip: Run \"User Login - Valid (Email)\" or \"User Login - Valid (Username)\" to get a token.');",
          "} else {",
          "    console.log('‚úÖ Token found:', token.substring(0, 20) + '...');",
          "    if (userId) {",
          "        console.log('‚úÖ User ID:', userId);",
          "    } else {",
          "        console.log('‚ö†Ô∏è  User ID not found. Please run a Login request to get user ID.');",
          "    }",
          "}",
          "",
          "// Validate required environment variables",
          "const baseUrl = pm.environment.get('baseUrl');",
          "if (!baseUrl) {",
          "    console.log('‚ùå baseUrl not found in environment variables');",
          "} else {",
          "    console.log('‚úÖ Base URL:', baseUrl);",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication (AuthLambda)",
      "description": "Authentication endpoints handled by AuthLambda function",
      "item": [
        {
          "name": "CORS Preflight",
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Access-Control-Request-Method",
                "value": "POST",
                "type": "text"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type, Authorization",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Registration - Valid",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('userId');",
                  "    pm.expect(jsonData.data.user).to.have.property('email');",
                  "    pm.expect(jsonData.data.user).to.have.property('username');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Registration - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"username\": \"testuser\",\n  \"password\": \"TestPass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Registration - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"username\": \"testuser\",\n  \"password\": \"weak\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Registration - Short Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"username\": \"a\",\n  \"password\": \"TestPass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login - Valid (Email)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('access_token');",
                  "    ",
                  "    // Save token to environment",
                  "    if (response.data.access_token) {",
                  "        pm.environment.set('access_token', response.data.access_token);",
                  "        console.log('Token saved to environment');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('user_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login - Valid (Username)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('access_token');",
                  "    ",
                  "    // Save token to environment",
                  "    if (response.data.access_token) {",
                  "        pm.environment.set('access_token', response.data.access_token);",
                  "        console.log('Token saved to environment');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('user_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login - Both Email and Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('access_token');",
                  "    pm.expect(jsonData.data).to.have.property('refresh_token');",
                  "    pm.expect(jsonData.data).to.have.property('id_token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login - Validation Error (No Credentials)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property('access_token');",
                  "    ",
                  "    // Save token to environment",
                  "    if (response.data.access_token) {",
                  "        pm.environment.set('access_token', response.data.access_token);",
                  "        console.log('Token saved to environment');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response structure is correct', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success', true);",
                  "    pm.expect(response).to.have.property('data');",
                  "    pm.expect(response.data).to.have.property('user_id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"WrongPass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User Logout - No Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "forgot-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password - Valid Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"confirmationCode\": \"123456\",\n  \"newPassword\": \"NewPass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "reset-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password - Invalid Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{email}}\",\n  \"confirmationCode\": \"invalid\",\n  \"newPassword\": \"NewPass123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "reset-password"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Posts (AuthLambda)",
      "description": "Posts endpoints handled by AuthLambda function",
      "item": [
        {
          "name": "Create Post - Text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains post data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('post');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('title');",
                  "    pm.expect(jsonData.data.post).to.have.property('content');",
                  "    pm.expect(jsonData.data.post).to.have.property('author_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('subreddit_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_type');",
                  "    pm.expect(jsonData.data.post).to.have.property('score');",
                  "    pm.expect(jsonData.data.post).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.post).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.post).to.have.property('created_at');",
                  "    pm.expect(jsonData.data.post).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_deleted');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_locked');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_sticky');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_nsfw');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_spoiler');",
                  "    pm.expect(jsonData.data.post).to.have.property('tags');",
                  "    pm.expect(jsonData.data.post).to.have.property('awards');",
                  "    pm.expect(jsonData.data.post).to.have.property('user_vote');",
                  "    ",
                  "    // Save post ID for other tests",
                  "    pm.collectionVariables.set('postId', jsonData.data.post.post_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My First Post\",\n  \"content\": \"This is the content of my post. It can be quite long and contain multiple paragraphs.\",\n  \"subreddit_id\": \"{{subredditId}}\",\n  \"post_type\": \"text\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": false,\n  \"flair\": \"Discussion\",\n  \"tags\": [\"programming\", \"tutorial\", \"backend\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Post - Link",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains post data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('post');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('title');",
                  "    pm.expect(jsonData.data.post).to.have.property('url');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_type');",
                  "    pm.expect(jsonData.data.post.post_type).to.eql('link');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Check out this awesome tutorial!\",\n  \"content\": null,\n  \"subreddit_id\": \"{{subredditId}}\",\n  \"post_type\": \"link\",\n  \"url\": \"https://example.com/tutorial\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": false,\n  \"flair\": \"Tutorial\",\n  \"tags\": [\"tutorial\", \"programming\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Post - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"\",\n  \"content\": \"This post has no title\",\n  \"subreddit_id\": \"{{subredditId}}\",\n  \"post_type\": \"text\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Posts - All",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains posts data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('posts');",
                  "    pm.expect(jsonData.data).to.have.property('total_count');",
                  "    pm.expect(jsonData.data).to.have.property('has_more');",
                  "    pm.expect(jsonData.data).to.have.property('next_offset');",
                  "    pm.expect(jsonData.data.posts).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Posts - With Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains posts data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('posts');",
                  "    pm.expect(jsonData.data).to.have.property('total_count');",
                  "    pm.expect(jsonData.data).to.have.property('has_more');",
                  "    pm.expect(jsonData.data).to.have.property('next_offset');",
                  "    pm.expect(jsonData.data.posts).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?subreddit_id={{subredditId}}&sort=hot&limit=10&offset=0&post_type=text&is_nsfw=false",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "subreddit_id",
                  "value": "{{subredditId}}"
                },
                {
                  "key": "sort",
                  "value": "hot"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "post_type",
                  "value": "text"
                },
                {
                  "key": "is_nsfw",
                  "value": "false"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Post by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains post data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('post');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('title');",
                  "    pm.expect(jsonData.data.post).to.have.property('content');",
                  "    pm.expect(jsonData.data.post).to.have.property('author_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('subreddit_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_type');",
                  "    pm.expect(jsonData.data.post).to.have.property('score');",
                  "    pm.expect(jsonData.data.post).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.post).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.post).to.have.property('created_at');",
                  "    pm.expect(jsonData.data.post).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_deleted');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_locked');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_sticky');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_nsfw');",
                  "    pm.expect(jsonData.data.post).to.have.property('is_spoiler');",
                  "    pm.expect(jsonData.data.post).to.have.property('tags');",
                  "    pm.expect(jsonData.data.post).to.have.property('awards');",
                  "    pm.expect(jsonData.data.post).to.have.property('user_vote');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Post by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts/nonexistent_post_id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "nonexistent_post_id"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains updated post data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('post');",
                  "    pm.expect(jsonData.data.post).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.post).to.have.property('title');",
                  "    pm.expect(jsonData.data.post).to.have.property('content');",
                  "    pm.expect(jsonData.data.post).to.have.property('updated_at');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Post Title\",\n  \"content\": \"This is the updated content of my post.\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": true,\n  \"flair\": \"Updated Flair\",\n  \"tags\": [\"updated\", \"tags\", \"backend\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Post - Access Denied",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "different_user_id",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Post Title\",\n  \"content\": \"This is the updated content of my post.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Post - Upvote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_count');",
                  "    pm.expect(jsonData.data.stats).to.have.property('view_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"upvote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Post - Downvote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_count');",
                  "    pm.expect(jsonData.data.stats).to.have.property('view_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"downvote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Post - Remove Vote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_count');",
                  "    pm.expect(jsonData.data.stats).to.have.property('view_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"remove\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Post - Invalid Vote Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"invalid_vote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Post - Access Denied",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-User-ID",
                "value": "different_user_id",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts/{{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "{{postId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments (CommentsLambda)",
      "description": "Comments endpoints handled by separate CommentsLambda function",
      "item": [
        {
          "name": "Create Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains comment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comment');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('author_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('content');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_type');",
                  "    pm.expect(jsonData.data.comment).to.have.property('score');",
                  "    pm.expect(jsonData.data.comment).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.comment).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.comment).to.have.property('reply_count');",
                  "    pm.expect(jsonData.data.comment).to.have.property('created_at');",
                  "    pm.expect(jsonData.data.comment).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_deleted');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_edited');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_locked');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_sticky');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_nsfw');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_spoiler');",
                  "    pm.expect(jsonData.data.comment).to.have.property('tags');",
                  "    pm.expect(jsonData.data.comment).to.have.property('awards');",
                  "    pm.expect(jsonData.data.comment).to.have.property('user_vote');",
                  "    pm.expect(jsonData.data.comment).to.have.property('replies');",
                  "    ",
                  "    // Save comment ID for other tests",
                  "    pm.collectionVariables.set('commentId', jsonData.data.comment.comment_id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post_id\": \"{{postId}}\",\n  \"content\": \"This is a great post! Thanks for sharing.\",\n  \"parent_id\": null,\n  \"comment_type\": \"comment\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": false,\n  \"flair\": \"Discussion\",\n  \"tags\": [\"feedback\", \"positive\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Reply",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains comment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comment');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('parent_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_type');",
                  "    pm.expect(jsonData.data.comment.comment_type).to.eql('reply');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post_id\": \"{{postId}}\",\n  \"content\": \"I agree with your point!\",\n  \"parent_id\": \"{{commentId}}\",\n  \"comment_type\": \"reply\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": false,\n  \"flair\": \"Agreement\",\n  \"tags\": [\"agreement\", \"support\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"post_id\": \"{{postId}}\",\n  \"content\": \"\",\n  \"parent_id\": null,\n  \"comment_type\": \"comment\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comments - All",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains comments data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comments');",
                  "    pm.expect(jsonData.data).to.have.property('total_count');",
                  "    pm.expect(jsonData.data).to.have.property('has_more');",
                  "    pm.expect(jsonData.data).to.have.property('next_offset');",
                  "    pm.expect(jsonData.data.comments).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments?post_id={{postId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ],
              "query": [
                {
                  "key": "post_id",
                  "value": "{{postId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comments - With Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains comments data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comments');",
                  "    pm.expect(jsonData.data).to.have.property('total_count');",
                  "    pm.expect(jsonData.data).to.have.property('has_more');",
                  "    pm.expect(jsonData.data).to.have.property('next_offset');",
                  "    pm.expect(jsonData.data.comments).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments?post_id={{postId}}&sort=hot&limit=10&offset=0&include_deleted=false",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ],
              "query": [
                {
                  "key": "post_id",
                  "value": "{{postId}}"
                },
                {
                  "key": "sort",
                  "value": "hot"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "include_deleted",
                  "value": "false"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comment by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains comment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comment');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('post_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('author_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('content');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_type');",
                  "    pm.expect(jsonData.data.comment).to.have.property('score');",
                  "    pm.expect(jsonData.data.comment).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.comment).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.comment).to.have.property('reply_count');",
                  "    pm.expect(jsonData.data.comment).to.have.property('created_at');",
                  "    pm.expect(jsonData.data.comment).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_deleted');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_edited');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_locked');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_sticky');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_nsfw');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_spoiler');",
                  "    pm.expect(jsonData.data.comment).to.have.property('tags');",
                  "    pm.expect(jsonData.data.comment).to.have.property('awards');",
                  "    pm.expect(jsonData.data.comment).to.have.property('user_vote');",
                  "    pm.expect(jsonData.data.comment).to.have.property('replies');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comment by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/nonexistent_comment_id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "nonexistent_comment_id"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains updated comment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('comment');",
                  "    pm.expect(jsonData.data.comment).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.comment).to.have.property('content');",
                  "    pm.expect(jsonData.data.comment).to.have.property('updated_at');",
                  "    pm.expect(jsonData.data.comment).to.have.property('is_edited');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated comment content\",\n  \"is_nsfw\": false,\n  \"is_spoiler\": true,\n  \"flair\": \"Updated Flair\",\n  \"tags\": [\"updated\", \"feedback\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Comment - Access Denied",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "different_user_id",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated comment content\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Comment - Upvote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('reply_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"upvote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Comment - Downvote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('reply_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"downvote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Comment - Remove Vote",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains stats data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('stats');",
                  "    pm.expect(jsonData.data.stats).to.have.property('comment_id');",
                  "    pm.expect(jsonData.data.stats).to.have.property('score');",
                  "    pm.expect(jsonData.data.stats).to.have.property('upvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('downvotes');",
                  "    pm.expect(jsonData.data.stats).to.have.property('reply_count');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"remove\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Vote Comment - Invalid Vote Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vote_type\": \"invalid_vote\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}",
                "vote"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment - Access Denied",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "X-User-ID",
                "value": "different_user_id",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/{{commentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "{{commentId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Invalid Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/invalid/endpoint",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "invalid",
                "endpoint"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invalid JSON",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "invalid json",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Missing User ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Post\",\n  \"content\": \"This is a test post\",\n  \"subreddit_id\": \"{{subredditId}}\",\n  \"post_type\": \"text\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Post Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-User-ID",
                "value": "{{userId}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Post\",\n  \"content\": \"This is a test post\",\n  \"subreddit_id\": \"{{subredditId}}\",\n  \"post_type\": \"invalid_type\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/posts/create",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts",
                "create"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Sort Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?sort=invalid_sort",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "sort",
                  "value": "invalid_sort"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Limit Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?limit=invalid_limit",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "invalid_limit"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Offset Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?offset=invalid_offset",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "invalid_offset"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Is NSFW Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?is_nsfw=invalid_boolean",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "is_nsfw",
                  "value": "invalid_boolean"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Posts - Invalid Is Spoiler Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test('Response contains error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text",
                "description": "JWT Bearer token for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/posts?is_spoiler=invalid_boolean",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "posts"
              ],
              "query": [
                {
                  "key": "is_spoiler",
                  "value": "invalid_boolean"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}